* MOSCOW Analysis
** MUST
*** ONGOING M1: TheTideTorrent MUST decode the metainfo file (*.torrent). 
+ TheTideTorrent MUST be able to parse a torrent file into following structure.
#+BEGIN_EXAMPLE
+ Info: A dictionary decscribing the files.
 + length: Length of file formatted as integer.
 + md5sum (optional): A 32 character hexadecimal string corresponding to the MD5 sum of the file.   
 + pieces length: Number of bytes in each pieces formatted as integer.
 + pieces: String consisting of the concatenation of all 20-byte SHA1 hash values, one per piece.
+ Announce: The URL of the tracker.
+ Announce-list (optional)
+ Creation date (optional)
+ Comment (optional)
+ Created by (optional)
#+END_EXAMPLE
+ A sample of a single-file torrent could be as 
#+BEGIN_EXAMPLE
d8:announce34:http://129.62.150.58:6969/announce13:creation datei1096224957e4:infod6:lengthi278422e4:name5:c.pdf12:piece lengthi262144e6:pieces40:#+Fï¿½J...
#+END_EXAMPLE
*** ONGOING M2: TheTideTorrent MUST encode metainfo file..
+ Bencoding is the way of storing some data structure in the torrent. 
+ A torrent file is bencoded dictionaries which contains 4 types of data structure.
1. Byte strings: 
   + Format:  <length of string>:<string>
#+BEGIN_EXAMPLE 
"savas" is stored as 5:savas 
#+END_EXAMPLE
2. Integers: 
   + Format: i<integer>e      
   + Integers are represented by an 'i' followed by the number in base 10 followed by an 'e'. 
   + Integers have no size limitation. 
   + All encodings with a leading zero are invalid, other than i0e which corresponds to 0.
#+BEGIN_EXAMPLE 
"3" is stored as i3e 
"-3" is stored as i-3e 
i03e is invalid
i-0e is invalid. 
i2013.11.03e is invalid
#+END_EXAMPLE
3. Lists: 
   + Format: l[value_1][value_2][value_3][value_n]e
#+BEGIN_EXAMPLE 
{savas, torrent} is stored as 15:savas7:torrente
#+END_EXAMPLE
4. Dictionary: 
   + Format: d[key_1][value_1][key_2][value_2][key_n][value_n]e 
   + Keys are string and ordered alphabetically.
 #+BEGIN_EXAMPLE
{savas-engineer, torrent-file} is stored as d5:savas8:engineer7:torrent4:filee
#+END_EXAMPLE
*** M3: TheTideTorrent MUST contact the Tracker 
**** Tracker HTTP/HTTPS Protocol  
+ A tracker is an HTTP service which responds to HTTP GET request.
+ The requests include info from clients that help the tracker keep overall statistics about the torrent. 
+ The response includes a peer list that helps the client connect to peers.
+ Client --GET_request--> Tracker with following parameters;
#+BEGIN_EXAMPLE
+ info_hash: 20-byte SHA1 hash of the value of the info key from the Metainfo file.
+ peer_id: 20-byte string used as a unique ID for the client.
+ port: The port number that the client is listening on.
+ uploaded: The total amount uploaded so far, encoded in base ten ascii.
+ downloaded: The total amount downloaded so far, encoded in base ten ascii.
+ left: The number of bytes this client still has to download, encoded in base ten ascii.
+ event: If specified, must be one of started, completed, or stopped. 
+ started: The first request to the tracker must include the event key with the started value.
+ stopped: Must be sent to the tracker if the client is shutting down gracefully. 
+ completed: Must be sent to the tracker when the download completes.
+ ip (optional)
+ numwant (optional)
#+END_EXAMPLE
+ Tracker --response--> Client consisting of a bencoded dictionary with the following keys;
#+BEGIN_EXAMPLE
+ failure reason: If any, then no need of other keys. The value is a human-readable error message (string).
+ interval: Interval in seconds that the client should wait between sending regular requests to the tracker.
+ complete: number of peers with the entire file, i.e. seeders (integer).
+ incomplete: number of non-seeder peers, aka "leechers" (integer).
+ peers: The value is a list of dictionaries, each with the following keys;
 + peer_id: peer's id (string).
 + ip: peer's ip address (ipv4, ipv6 or DNS name formatted as string).
 + port: peer's port number (integer).
#+END_EXAMPLE
*** M4: TheTideTorrent MUST connect to peers 
**** Peer Wire Protocol  
***** Handshake
+ TheTideTorrent opens a port for local peer and listens on this port for incoming connections. 

+ The tracker must know about this port. 

+ Remote peer must connect over a TCP channel.

+ Remote peer then transmits a first required message to complete handshake.

+ The structure of a handshake message is string of bytes as follows;
| Name Length | Protocol Name | Reseverd | Info Hash | Peer ID |

*** M5: User MUST be able to download from connected peers
**** Peer Wire Protocol 
+ Once handshake has been completed, both remote and local peers can send asynchronous message to each other.
+ This message contains state of local peer and transferring data.
*** M6: User MUST be able to share complete pieces with others.
**** Peer Wire Protocol 
Once handsake has been completed and a piece of data has been downloaded, remote peer uploads. 

** SHOULD
*** S1: User SHOULD select where to save the file locally.
*** S2: User SHOULD continue to communicate with the Tracker   
User can contact the Tracker in order to retreive newer peers even though download has already begun. 

** References
1. [[http://www.bittorrent.org/beps/bep_0003.html][Bram Cohen BitTorrent Protocol Specification]]
2. [[https://wiki.theory.org/BitTorrentSpecification][Theory Wiki BitTorrent Protocol Specification]]
3. [[http://en.wikipedia.org/wiki/BitTorrent_tracker][Wikipedia Bittorrent_tracker]]
4. [[http://en.wikipedia.org/wiki/Torrent_file][Wikipedia Torrent_file]]
5. [[http://en.wikipedia.org/wiki/BitTorrent][Wikipedia BitTorrent]]



